CREATE TABLE movies (
  id INT NOT NULL,
  title VARCHAR(255) NOT NULL,
  release_date DATE NOT NULL,
  rating FLOAT NOT NULL,
  PRIMARY KEY (id)
);
INSERT INTO movies (id, title, release_date, rating)
VALUES (1, 'Movie 1', '2022-01-01', 4.5),
       (2, 'Movie 2', '2022-02-01', 3.8),
       (3, 'Movie 3', '2022-03-01', 4.2);
       

CREATE TABLE media (
  id INT NOT NULL,
  movie_id INT NOT NULL,
  type VARCHAR(255) NOT NULL,
  url VARCHAR(255) NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (movie_id) REFERENCES movies (id)
);
INSERT INTO media (id, movie_id, type, url)
VALUES (1, 1, 'Video', 'http://example.com/video1.mp4'),
       (2, 1, 'Image', 'http://example.com/image1.jpg'),
       (3, 2, 'Video', 'http://example.com/video2.mp4');
       
       
CREATE TABLE genres (
  id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);
INSERT INTO genres (id, name)
VALUES (1, 'Action'),
       (2, 'Comedy'),
       (3, 'Drama');
       

CREATE TABLE movie_genres (
  movie_id INT NOT NULL,
  genre_id INT NOT NULL,
  PRIMARY KEY (movie_id, genre_id),
  FOREIGN KEY (movie_id) REFERENCES movies (id),
  FOREIGN KEY (genre_id) REFERENCES genres (id)
);
INSERT INTO movie_genres (movie_id, genre_id)
VALUES (1, 1),
       (1, 2),
       (2, 2),
       (3, 3);
       

CREATE TABLE reviews (
  id INT NOT NULL,
  movie_id INT NOT NULL,
  user_id INT NOT NULL,
  rating INT NOT NULL,
  comment VARCHAR(255) NOT NULL,
  created_at DATETIME NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (movie_id) REFERENCES movies (id),
  FOREIGN KEY (user_id) REFERENCES users (id)
);
INSERT INTO reviews (id, movie_id, user_id, rating, comment, created_at)
VALUES (1, 1, 1, 4, 'Great movie!', '2022-01-02 10:30:00'),
       (2, 1, 2, 3, 'Enjoyed it.', '2022-01-03 14:45:00');
       

CREATE TABLE users (
  id INT NOT NULL,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);
INSERT INTO users (id, username, password)
VALUES (1, 'user1', 'password1'),
       (2, 'user2', 'password2');
       

CREATE TABLE artists (
  id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);
INSERT INTO artists (id, name)
VALUES (1, 'Artist 1'),
       (2, 'Artist 2');
       

CREATE TABLE artist_skills (
  artist_id INT NOT NULL,
  skill VARCHAR(255) NOT NULL,
  PRIMARY KEY (artist_id, skill),
  FOREIGN KEY (artist_id) REFERENCES artists (id)
);
INSERT INTO artist_skills (artist_id, skill)
VALUES (1, 'Acting'),
       (1, 'Singing'),
       (2, 'Directing');
       

CREATE TABLE artist_roles (
  movie_id INT NOT NULL,
  artist_id INT NOT NULL,
  role VARCHAR(255) NOT NULL,
  PRIMARY KEY (movie_id, artist_id),
  FOREIGN KEY (movie_id) REFERENCES movies (id),
  FOREIGN KEY (artist_id) REFERENCES artists (id)
);
INSERT INTO artist_roles (movie_id, artist_id, role)
VALUES (1, 1, 'Actor'),
       (1, 2, 'Director');
       
       

//Retrieve all movies and their genres:
SELECT m.title, g.name AS genre_name
FROM movies m
JOIN movie_genres mg ON m.id = mg.movie_id
JOIN genres g ON mg.genre_id = g.id;
O/P:
| title    | genre_name |
|----------|------------|
| Movie 1  | Action     |
| Movie 1  | Comedy     |
| Movie 2  | Comedy     |
| Movie 3  | Drama      |

//Retrieve all reviews for a specific movie:
SELECT r.rating, r.comment, u.username
FROM reviews r
JOIN users u ON r.user_id = u.id
WHERE r.movie_id = 1;
O/P:
| rating | comment        | username |
|--------|----------------|----------|
| 4      | Great movie!   | user1    |
| 3      | Enjoyed it.    | user2    |

//Retrieve all media (videos and images) for a specific movie:
SELECT m.type, m.url
FROM media m
WHERE m.movie_id = 1;
O/P:
| type  | url                       |
|-------|---------------------------|
| Video | http://example.com/video1.mp4 |
| Image | http://example.com/image1.jpg |

//Retrieve all artists and their skills:
SELECT a.name, asl.skill
FROM artists a
JOIN artist_skills asl ON a.id = asl.artist_id;
O/P:
| name     | skill    |
|----------|----------|
| Artist 1 | Acting   |
| Artist 1 | Singing  |
| Artist 2 | Directing |

//Retrieve all movies and the roles performed by artists in them:
SELECT m.title, a.name, ar.role
FROM movies m
JOIN artist_roles ar ON m.id = ar.movie_id
JOIN artists a ON ar.artist_id = a.id;
O/P:
| title   | name     | role     |
|---------|----------|----------|
| Movie 1 | Artist 1 | Actor    |
| Movie 1 | Artist 2 | Director |
